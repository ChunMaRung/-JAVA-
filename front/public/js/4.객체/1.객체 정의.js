/*
	
	- 객체[ Object ]
		1. 사용목적 : 서로 다른 데이터유형(속성) 들을 한번에 저장
		2. 형태 : 
			let 객체명 = { 속성명 : 데이터 , 속성명 : 데이터 , 속성명 : 데이터 }
		3. 선언 : 
			let 객체명 = {
				속성명 : 데이터 ,
				속성명 : 변수 ,
				속성명 : 상수 ,
				속성명 : 배열명 ,
				속성명 : 함수명
			}
			
		4. 객체호출 
			1. 객체 정보 : 객체명
			2. 객체.속성명 : 객체내 해당 속성의 데이터/함수 호출 
				. :접근연산자 [ 속성 호출 ]
			
		예) 회원 객체
			let 회원 = { 아이디 : 'qweqwe' , 비밀번호 : '123' , 이름 : '유재석' }
*/
// 1. 객체의 선언 : 서로 다른 데이터유형들 간의 식별가능
let 객체1 = { 아이디 : 'qweqwe' ,  비밀번호 : '123' , 이름 : '유재석' }; console.log( 객체1 ) // 객체호출	
	// vs
let 배열1 = [ 'qweqwe' , '123' , '유재석' ]; console.log( 배열1 )

// 2. 객체의 호출
console.log( 객체1 )	// 객체의 모든 정보 호출 
console.log( '객체내 아이디 속성의 값 : ' + 객체1.아이디 ) // 객체내 '아이디' 속성의 값 호출 
console.log( '객체내 비밀번호 속성의 값 : ' + 객체1.비밀번호 )
console.log( '객체내 이름 속성의 값 : ' + 객체1.이름 )
	// vs
console.log( 배열1[0] )	


//3. 객체 추가
객체1.주소 = '안산시 상록구'; console.log(객체1)
객체1.연락처 = '010-3333-4444'; console.log(객체1)

//4. 객체 삭제
delete 객체1.연락처; console.log(객체1)

//5 . 변경
객체1.주소 = '서울'; console.log(객체1);

//6 배열과 객체 관계
let 게시판 = { 제목 : '하하', 내용 : '내용'}
let 게시판2 = { 제목 : '하하2', 내용 : '내용2'}

let 게시판배열 = [게시판,게시판2]; console.log(게시판배열[1])

let 공지사항 ={
	게시판이름 : '공지사항',
	게시물목록 : '게시물배열'
	
 }

















